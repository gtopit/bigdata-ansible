# 如果已经安装了jdk，则在该台主机跳过安装
- name: 检查jdk版本信息
  shell: |
    . /etc/profile && java -version
  register: result
  ignore_errors: True
 
# 查看是否必须安装jdk标志
- name: 查看是否必须安装jdk标志
  shell: |
    echo "{{ need_install_jdk }}"
  register: is_need

- name: 查找jdk在解压目录是否已存在
  shell: |
    find {{ installed_dir }} -name jdk*[0-9]*.[0-9]*.[0-9]*
  register: exist_jdk_dir

- name: 如果安装目录已存在jdk，则将其删除
  file: path={{ exist_jdk_dir.stdout }} state=absent
  when: exist_jdk_dir.stdout != "" and (result.failed or is_need.stdout == "True")

- name: 解压jdk到指定目录
  unarchive: src={{ item }} dest={{ installed_dir }}
  with_fileglob:
    - "{{ software_dir }}/jdk-*.tar.gz"
  when: result.failed or is_need.stdout == "True"

- name: 查找jdk解压后的目录
  shell: |
    find {{ installed_dir }} -name jdk[0-9]*.[0-9]*.[0-9]* -type d
  register: jdk_dir

- name: 查看/etc/profile文件是否存在JAVA_HOME环境变量
  shell: |
    grep -e "export JAVA_HOME={{ jdk_dir.stdout }}" /etc/profile
  register: is_exist
  ignore_errors: True

- name: 配置jdk环境变量
  shell: |
    echo -e "export JAVA_HOME={{ jdk_dir.stdout }} \nexport PATH=\$PATH:\$JAVA_HOME/bin \n" >> /etc/profile
  when: is_exist.stdout == "" and (result.failed or is_need.stdout == "True")

- name: 查看jdk是否安装成功
  shell: |
    . /etc/profile && java -version
  register: status

- name: 查看jdk版本信息
  debug: msg={{ status.stderr_lines }}
  